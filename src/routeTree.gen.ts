/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as IndexImport } from './pages/index'

// Create Virtual Routes

const PlacesIndexLazyImport = createFileRoute('/places/')()
const IndividualsIndexLazyImport = createFileRoute('/individuals/')()
const FamiliesIndexLazyImport = createFileRoute('/families/')()
const EventsIndexLazyImport = createFileRoute('/events/')()
const PlacesAddLazyImport = createFileRoute('/places/add')()
const PlacesPlaceIdLazyImport = createFileRoute('/places/$placeId')()
const IndividualsIndividualIdLazyImport = createFileRoute(
  '/individuals/$individualId',
)()
const FamiliesFamilyIdLazyImport = createFileRoute('/families/$familyId')()
const EventsEventIdLazyImport = createFileRoute('/events/$eventId')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlacesIndexLazyRoute = PlacesIndexLazyImport.update({
  id: '/places/',
  path: '/places/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./pages/places/index.lazy').then((d) => d.Route))

const IndividualsIndexLazyRoute = IndividualsIndexLazyImport.update({
  id: '/individuals/',
  path: '/individuals/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./pages/individuals/index.lazy').then((d) => d.Route),
)

const FamiliesIndexLazyRoute = FamiliesIndexLazyImport.update({
  id: '/families/',
  path: '/families/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./pages/families/index.lazy').then((d) => d.Route))

const EventsIndexLazyRoute = EventsIndexLazyImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./pages/events/index.lazy').then((d) => d.Route))

const PlacesAddLazyRoute = PlacesAddLazyImport.update({
  id: '/places/add',
  path: '/places/add',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./pages/places/add.lazy').then((d) => d.Route))

const PlacesPlaceIdLazyRoute = PlacesPlaceIdLazyImport.update({
  id: '/places/$placeId',
  path: '/places/$placeId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./pages/places/$placeId.lazy').then((d) => d.Route),
)

const IndividualsIndividualIdLazyRoute =
  IndividualsIndividualIdLazyImport.update({
    id: '/individuals/$individualId',
    path: '/individuals/$individualId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./pages/individuals/$individualId.lazy').then((d) => d.Route),
  )

const FamiliesFamilyIdLazyRoute = FamiliesFamilyIdLazyImport.update({
  id: '/families/$familyId',
  path: '/families/$familyId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./pages/families/$familyId.lazy').then((d) => d.Route),
)

const EventsEventIdLazyRoute = EventsEventIdLazyImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./pages/events/$eventId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/families/$familyId': {
      id: '/families/$familyId'
      path: '/families/$familyId'
      fullPath: '/families/$familyId'
      preLoaderRoute: typeof FamiliesFamilyIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/individuals/$individualId': {
      id: '/individuals/$individualId'
      path: '/individuals/$individualId'
      fullPath: '/individuals/$individualId'
      preLoaderRoute: typeof IndividualsIndividualIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/places/$placeId': {
      id: '/places/$placeId'
      path: '/places/$placeId'
      fullPath: '/places/$placeId'
      preLoaderRoute: typeof PlacesPlaceIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/places/add': {
      id: '/places/add'
      path: '/places/add'
      fullPath: '/places/add'
      preLoaderRoute: typeof PlacesAddLazyImport
      parentRoute: typeof rootRoute
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/families/': {
      id: '/families/'
      path: '/families'
      fullPath: '/families'
      preLoaderRoute: typeof FamiliesIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/individuals/': {
      id: '/individuals/'
      path: '/individuals'
      fullPath: '/individuals'
      preLoaderRoute: typeof IndividualsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/places/': {
      id: '/places/'
      path: '/places'
      fullPath: '/places'
      preLoaderRoute: typeof PlacesIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdLazyRoute
  '/families/$familyId': typeof FamiliesFamilyIdLazyRoute
  '/individuals/$individualId': typeof IndividualsIndividualIdLazyRoute
  '/places/$placeId': typeof PlacesPlaceIdLazyRoute
  '/places/add': typeof PlacesAddLazyRoute
  '/events': typeof EventsIndexLazyRoute
  '/families': typeof FamiliesIndexLazyRoute
  '/individuals': typeof IndividualsIndexLazyRoute
  '/places': typeof PlacesIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdLazyRoute
  '/families/$familyId': typeof FamiliesFamilyIdLazyRoute
  '/individuals/$individualId': typeof IndividualsIndividualIdLazyRoute
  '/places/$placeId': typeof PlacesPlaceIdLazyRoute
  '/places/add': typeof PlacesAddLazyRoute
  '/events': typeof EventsIndexLazyRoute
  '/families': typeof FamiliesIndexLazyRoute
  '/individuals': typeof IndividualsIndexLazyRoute
  '/places': typeof PlacesIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdLazyRoute
  '/families/$familyId': typeof FamiliesFamilyIdLazyRoute
  '/individuals/$individualId': typeof IndividualsIndividualIdLazyRoute
  '/places/$placeId': typeof PlacesPlaceIdLazyRoute
  '/places/add': typeof PlacesAddLazyRoute
  '/events/': typeof EventsIndexLazyRoute
  '/families/': typeof FamiliesIndexLazyRoute
  '/individuals/': typeof IndividualsIndexLazyRoute
  '/places/': typeof PlacesIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/events/$eventId'
    | '/families/$familyId'
    | '/individuals/$individualId'
    | '/places/$placeId'
    | '/places/add'
    | '/events'
    | '/families'
    | '/individuals'
    | '/places'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/events/$eventId'
    | '/families/$familyId'
    | '/individuals/$individualId'
    | '/places/$placeId'
    | '/places/add'
    | '/events'
    | '/families'
    | '/individuals'
    | '/places'
  id:
    | '__root__'
    | '/'
    | '/events/$eventId'
    | '/families/$familyId'
    | '/individuals/$individualId'
    | '/places/$placeId'
    | '/places/add'
    | '/events/'
    | '/families/'
    | '/individuals/'
    | '/places/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EventsEventIdLazyRoute: typeof EventsEventIdLazyRoute
  FamiliesFamilyIdLazyRoute: typeof FamiliesFamilyIdLazyRoute
  IndividualsIndividualIdLazyRoute: typeof IndividualsIndividualIdLazyRoute
  PlacesPlaceIdLazyRoute: typeof PlacesPlaceIdLazyRoute
  PlacesAddLazyRoute: typeof PlacesAddLazyRoute
  EventsIndexLazyRoute: typeof EventsIndexLazyRoute
  FamiliesIndexLazyRoute: typeof FamiliesIndexLazyRoute
  IndividualsIndexLazyRoute: typeof IndividualsIndexLazyRoute
  PlacesIndexLazyRoute: typeof PlacesIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EventsEventIdLazyRoute: EventsEventIdLazyRoute,
  FamiliesFamilyIdLazyRoute: FamiliesFamilyIdLazyRoute,
  IndividualsIndividualIdLazyRoute: IndividualsIndividualIdLazyRoute,
  PlacesPlaceIdLazyRoute: PlacesPlaceIdLazyRoute,
  PlacesAddLazyRoute: PlacesAddLazyRoute,
  EventsIndexLazyRoute: EventsIndexLazyRoute,
  FamiliesIndexLazyRoute: FamiliesIndexLazyRoute,
  IndividualsIndexLazyRoute: IndividualsIndexLazyRoute,
  PlacesIndexLazyRoute: PlacesIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/events/$eventId",
        "/families/$familyId",
        "/individuals/$individualId",
        "/places/$placeId",
        "/places/add",
        "/events/",
        "/families/",
        "/individuals/",
        "/places/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/events/$eventId": {
      "filePath": "events/$eventId.lazy.tsx"
    },
    "/families/$familyId": {
      "filePath": "families/$familyId.lazy.tsx"
    },
    "/individuals/$individualId": {
      "filePath": "individuals/$individualId.lazy.tsx"
    },
    "/places/$placeId": {
      "filePath": "places/$placeId.lazy.tsx"
    },
    "/places/add": {
      "filePath": "places/add.lazy.tsx"
    },
    "/events/": {
      "filePath": "events/index.lazy.tsx"
    },
    "/families/": {
      "filePath": "families/index.lazy.tsx"
    },
    "/individuals/": {
      "filePath": "individuals/index.lazy.tsx"
    },
    "/places/": {
      "filePath": "places/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
