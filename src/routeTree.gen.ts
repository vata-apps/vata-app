/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './pages/__root'
import { Route as IndexRouteImport } from './pages/index'

const PlacesIndexLazyRouteImport = createFileRoute('/places/')()
const IndividualsIndexLazyRouteImport = createFileRoute('/individuals/')()
const FamiliesIndexLazyRouteImport = createFileRoute('/families/')()
const EventsIndexLazyRouteImport = createFileRoute('/events/')()
const PlacesAddLazyRouteImport = createFileRoute('/places/add')()
const PlacesPlaceIdLazyRouteImport = createFileRoute('/places/$placeId')()
const IndividualsAddLazyRouteImport = createFileRoute('/individuals/add')()
const IndividualsIndividualIdLazyRouteImport = createFileRoute(
  '/individuals/$individualId',
)()
const FamiliesFamilyIdLazyRouteImport = createFileRoute('/families/$familyId')()
const EventsAddLazyRouteImport = createFileRoute('/events/add')()
const EventsEventIdLazyRouteImport = createFileRoute('/events/$eventId')()
const PlacesPlaceIdEditLazyRouteImport = createFileRoute(
  '/places/$placeId_/edit',
)()
const IndividualsIndividualIdEditLazyRouteImport = createFileRoute(
  '/individuals/$individualId_/edit',
)()
const EventsEventIdEditLazyRouteImport = createFileRoute(
  '/events/$eventId_/edit',
)()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlacesIndexLazyRoute = PlacesIndexLazyRouteImport.update({
  id: '/places/',
  path: '/places/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./pages/places/index.lazy').then((d) => d.Route))
const IndividualsIndexLazyRoute = IndividualsIndexLazyRouteImport.update({
  id: '/individuals/',
  path: '/individuals/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./pages/individuals/index.lazy').then((d) => d.Route),
)
const FamiliesIndexLazyRoute = FamiliesIndexLazyRouteImport.update({
  id: '/families/',
  path: '/families/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./pages/families/index.lazy').then((d) => d.Route))
const EventsIndexLazyRoute = EventsIndexLazyRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./pages/events/index.lazy').then((d) => d.Route))
const PlacesAddLazyRoute = PlacesAddLazyRouteImport.update({
  id: '/places/add',
  path: '/places/add',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./pages/places/add.lazy').then((d) => d.Route))
const PlacesPlaceIdLazyRoute = PlacesPlaceIdLazyRouteImport.update({
  id: '/places/$placeId',
  path: '/places/$placeId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./pages/places/$placeId.lazy').then((d) => d.Route),
)
const IndividualsAddLazyRoute = IndividualsAddLazyRouteImport.update({
  id: '/individuals/add',
  path: '/individuals/add',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./pages/individuals/add.lazy').then((d) => d.Route),
)
const IndividualsIndividualIdLazyRoute =
  IndividualsIndividualIdLazyRouteImport.update({
    id: '/individuals/$individualId',
    path: '/individuals/$individualId',
    getParentRoute: () => rootRouteImport,
  } as any).lazy(() =>
    import('./pages/individuals/$individualId.lazy').then((d) => d.Route),
  )
const FamiliesFamilyIdLazyRoute = FamiliesFamilyIdLazyRouteImport.update({
  id: '/families/$familyId',
  path: '/families/$familyId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./pages/families/$familyId.lazy').then((d) => d.Route),
)
const EventsAddLazyRoute = EventsAddLazyRouteImport.update({
  id: '/events/add',
  path: '/events/add',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./pages/events/add.lazy').then((d) => d.Route))
const EventsEventIdLazyRoute = EventsEventIdLazyRouteImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./pages/events/$eventId.lazy').then((d) => d.Route),
)
const PlacesPlaceIdEditLazyRoute = PlacesPlaceIdEditLazyRouteImport.update({
  id: '/places/$placeId_/edit',
  path: '/places/$placeId/edit',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./pages/places/$placeId_/edit.lazy').then((d) => d.Route),
)
const IndividualsIndividualIdEditLazyRoute =
  IndividualsIndividualIdEditLazyRouteImport.update({
    id: '/individuals/$individualId_/edit',
    path: '/individuals/$individualId/edit',
    getParentRoute: () => rootRouteImport,
  } as any).lazy(() =>
    import('./pages/individuals/$individualId_/edit.lazy').then((d) => d.Route),
  )
const EventsEventIdEditLazyRoute = EventsEventIdEditLazyRouteImport.update({
  id: '/events/$eventId_/edit',
  path: '/events/$eventId/edit',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./pages/events/$eventId_/edit.lazy').then((d) => d.Route),
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdLazyRoute
  '/events/add': typeof EventsAddLazyRoute
  '/families/$familyId': typeof FamiliesFamilyIdLazyRoute
  '/individuals/$individualId': typeof IndividualsIndividualIdLazyRoute
  '/individuals/add': typeof IndividualsAddLazyRoute
  '/places/$placeId': typeof PlacesPlaceIdLazyRoute
  '/places/add': typeof PlacesAddLazyRoute
  '/events': typeof EventsIndexLazyRoute
  '/families': typeof FamiliesIndexLazyRoute
  '/individuals': typeof IndividualsIndexLazyRoute
  '/places': typeof PlacesIndexLazyRoute
  '/events/$eventId/edit': typeof EventsEventIdEditLazyRoute
  '/individuals/$individualId/edit': typeof IndividualsIndividualIdEditLazyRoute
  '/places/$placeId/edit': typeof PlacesPlaceIdEditLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdLazyRoute
  '/events/add': typeof EventsAddLazyRoute
  '/families/$familyId': typeof FamiliesFamilyIdLazyRoute
  '/individuals/$individualId': typeof IndividualsIndividualIdLazyRoute
  '/individuals/add': typeof IndividualsAddLazyRoute
  '/places/$placeId': typeof PlacesPlaceIdLazyRoute
  '/places/add': typeof PlacesAddLazyRoute
  '/events': typeof EventsIndexLazyRoute
  '/families': typeof FamiliesIndexLazyRoute
  '/individuals': typeof IndividualsIndexLazyRoute
  '/places': typeof PlacesIndexLazyRoute
  '/events/$eventId/edit': typeof EventsEventIdEditLazyRoute
  '/individuals/$individualId/edit': typeof IndividualsIndividualIdEditLazyRoute
  '/places/$placeId/edit': typeof PlacesPlaceIdEditLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/events/$eventId': typeof EventsEventIdLazyRoute
  '/events/add': typeof EventsAddLazyRoute
  '/families/$familyId': typeof FamiliesFamilyIdLazyRoute
  '/individuals/$individualId': typeof IndividualsIndividualIdLazyRoute
  '/individuals/add': typeof IndividualsAddLazyRoute
  '/places/$placeId': typeof PlacesPlaceIdLazyRoute
  '/places/add': typeof PlacesAddLazyRoute
  '/events/': typeof EventsIndexLazyRoute
  '/families/': typeof FamiliesIndexLazyRoute
  '/individuals/': typeof IndividualsIndexLazyRoute
  '/places/': typeof PlacesIndexLazyRoute
  '/events/$eventId_/edit': typeof EventsEventIdEditLazyRoute
  '/individuals/$individualId_/edit': typeof IndividualsIndividualIdEditLazyRoute
  '/places/$placeId_/edit': typeof PlacesPlaceIdEditLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/events/$eventId'
    | '/events/add'
    | '/families/$familyId'
    | '/individuals/$individualId'
    | '/individuals/add'
    | '/places/$placeId'
    | '/places/add'
    | '/events'
    | '/families'
    | '/individuals'
    | '/places'
    | '/events/$eventId/edit'
    | '/individuals/$individualId/edit'
    | '/places/$placeId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/events/$eventId'
    | '/events/add'
    | '/families/$familyId'
    | '/individuals/$individualId'
    | '/individuals/add'
    | '/places/$placeId'
    | '/places/add'
    | '/events'
    | '/families'
    | '/individuals'
    | '/places'
    | '/events/$eventId/edit'
    | '/individuals/$individualId/edit'
    | '/places/$placeId/edit'
  id:
    | '__root__'
    | '/'
    | '/events/$eventId'
    | '/events/add'
    | '/families/$familyId'
    | '/individuals/$individualId'
    | '/individuals/add'
    | '/places/$placeId'
    | '/places/add'
    | '/events/'
    | '/families/'
    | '/individuals/'
    | '/places/'
    | '/events/$eventId_/edit'
    | '/individuals/$individualId_/edit'
    | '/places/$placeId_/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EventsEventIdLazyRoute: typeof EventsEventIdLazyRoute
  EventsAddLazyRoute: typeof EventsAddLazyRoute
  FamiliesFamilyIdLazyRoute: typeof FamiliesFamilyIdLazyRoute
  IndividualsIndividualIdLazyRoute: typeof IndividualsIndividualIdLazyRoute
  IndividualsAddLazyRoute: typeof IndividualsAddLazyRoute
  PlacesPlaceIdLazyRoute: typeof PlacesPlaceIdLazyRoute
  PlacesAddLazyRoute: typeof PlacesAddLazyRoute
  EventsIndexLazyRoute: typeof EventsIndexLazyRoute
  FamiliesIndexLazyRoute: typeof FamiliesIndexLazyRoute
  IndividualsIndexLazyRoute: typeof IndividualsIndexLazyRoute
  PlacesIndexLazyRoute: typeof PlacesIndexLazyRoute
  EventsEventIdEditLazyRoute: typeof EventsEventIdEditLazyRoute
  IndividualsIndividualIdEditLazyRoute: typeof IndividualsIndividualIdEditLazyRoute
  PlacesPlaceIdEditLazyRoute: typeof PlacesPlaceIdEditLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/places/': {
      id: '/places/'
      path: '/places'
      fullPath: '/places'
      preLoaderRoute: typeof PlacesIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/individuals/': {
      id: '/individuals/'
      path: '/individuals'
      fullPath: '/individuals'
      preLoaderRoute: typeof IndividualsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/families/': {
      id: '/families/'
      path: '/families'
      fullPath: '/families'
      preLoaderRoute: typeof FamiliesIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/places/add': {
      id: '/places/add'
      path: '/places/add'
      fullPath: '/places/add'
      preLoaderRoute: typeof PlacesAddLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/places/$placeId': {
      id: '/places/$placeId'
      path: '/places/$placeId'
      fullPath: '/places/$placeId'
      preLoaderRoute: typeof PlacesPlaceIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/individuals/add': {
      id: '/individuals/add'
      path: '/individuals/add'
      fullPath: '/individuals/add'
      preLoaderRoute: typeof IndividualsAddLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/individuals/$individualId': {
      id: '/individuals/$individualId'
      path: '/individuals/$individualId'
      fullPath: '/individuals/$individualId'
      preLoaderRoute: typeof IndividualsIndividualIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/families/$familyId': {
      id: '/families/$familyId'
      path: '/families/$familyId'
      fullPath: '/families/$familyId'
      preLoaderRoute: typeof FamiliesFamilyIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/add': {
      id: '/events/add'
      path: '/events/add'
      fullPath: '/events/add'
      preLoaderRoute: typeof EventsAddLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/places/$placeId_/edit': {
      id: '/places/$placeId_/edit'
      path: '/places/$placeId/edit'
      fullPath: '/places/$placeId/edit'
      preLoaderRoute: typeof PlacesPlaceIdEditLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/individuals/$individualId_/edit': {
      id: '/individuals/$individualId_/edit'
      path: '/individuals/$individualId/edit'
      fullPath: '/individuals/$individualId/edit'
      preLoaderRoute: typeof IndividualsIndividualIdEditLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/$eventId_/edit': {
      id: '/events/$eventId_/edit'
      path: '/events/$eventId/edit'
      fullPath: '/events/$eventId/edit'
      preLoaderRoute: typeof EventsEventIdEditLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EventsEventIdLazyRoute: EventsEventIdLazyRoute,
  EventsAddLazyRoute: EventsAddLazyRoute,
  FamiliesFamilyIdLazyRoute: FamiliesFamilyIdLazyRoute,
  IndividualsIndividualIdLazyRoute: IndividualsIndividualIdLazyRoute,
  IndividualsAddLazyRoute: IndividualsAddLazyRoute,
  PlacesPlaceIdLazyRoute: PlacesPlaceIdLazyRoute,
  PlacesAddLazyRoute: PlacesAddLazyRoute,
  EventsIndexLazyRoute: EventsIndexLazyRoute,
  FamiliesIndexLazyRoute: FamiliesIndexLazyRoute,
  IndividualsIndexLazyRoute: IndividualsIndexLazyRoute,
  PlacesIndexLazyRoute: PlacesIndexLazyRoute,
  EventsEventIdEditLazyRoute: EventsEventIdEditLazyRoute,
  IndividualsIndividualIdEditLazyRoute: IndividualsIndividualIdEditLazyRoute,
  PlacesPlaceIdEditLazyRoute: PlacesPlaceIdEditLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
